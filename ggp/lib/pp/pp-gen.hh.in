#ifndef PP_GEN_HH
#define PP_GEN_HH

#ppignore // <$rvX> - generate a number from Xth range (X is zero based)
#ppignore // <$a[EXPR]> - evaluate arithmetic expression and generate the result
#ppignore // <$b[EXPR]<$$bt[REPLACEMENT]><$$bf[REPLACEMENT]>> - generate a replacement based on evaluation of the boolean expression
#ppignore // <$iX<$$ip[PREFIX]><$$is[SUFFIX]><$$ic[SEPARATOR]>> - iterate the Xth range (X is zero based) and generate the number from the range prefixed, suffixed and separated

#pptemplate GA GENERATED_DETAIL_PP_APPLY
#pptemplate GB GENERATED_DETAIL_PP_BOOL
#pptemplate GD GENERATED_DETAIL_PP_DEC
#pptemplate GS GENERATED_DETAIL_PP_SEQ
#pptemplate GT GENERATED_DETAIL_PP_TUPLE
#pptemplate GN GENERATED_DETAIL_PP_TUPLE_OF_N_TUPLES

// apply stops here
#ppdefine <GA>_0(func, array)


#pppushrange 1 3

// decrements
#ppdefine <GD>_<$rv0> <$a[<$rv0> - 1]>

// applies
#ppdefine <GA>_EX_4_<$rv0>(func, array, shifted_array) func array <GA>_<$a[<$rv0> - 1]>(func, shifted_array)
#ppdefine <GA>_EX_3_<$rv0>(func, first_item, shifted_array) <GA>_EX_4_<$rv0>(func, first_item, shifted_array)
#ppdefine <GA>_EX_2_<$rv0>(func, array) <GA>_EX_3_<$rv0>(func, PP_ARRAY_FIRST_ITEM(array), PP_ARRAY_SHIFT(array))
#ppdefine <GA>_EX_1_<$rv0>(func, array) <GA>_EX_2_<$rv0>(func, array)
#ppdefine <GA>_<$rv0>(func, array) <GA>_EX_1_<$rv0>(func, array)

#pppoprange

#pppushrange 3 0
#pppushrange 1 3

// counting args
#ppignore // seq, no prefix, no suffix, comma and space separator
#ppdefine <GS> <$i0<$$ip[]><$$is[]><$$ic[, ]>>
#ppignore // _ prefix, no suffix, comma and separator
#ppdefine <GS>_ARG_N_EX_2(<$i1<$$ip[]><$$is[]><$$ic[, ]>>, N, ...) N
#ppdefine <GS>_ARG_N_EX_1(...) <GS>_ARG_N_EX_2(__VA_ARGS__)
// TODO: <GS>_ARG_N_EX_1(__VA_ARGS__ __VA_OPT__(,) <GS>)
#ppdefine <GS>_ARG_N(...) <GS>_ARG_N_EX_1(__VA_ARGS__, <GS>)

#pppoprange 2

// tuple
#ppdefine <GT>_PARENS_1(item) (item)


#pppushrange 2 3

#ppdefine <GT>_PARENS_EX_1_<$rv0>(item, ...) (item), <GT>_PARENS_<$a[<$rv0> - 1]>(__VA_ARGS__)
#ppdefine <GT>_PARENS_<$rv0>(...) <GT>_PARENS_EX_1_<$rv0>(__VA_ARGS__)

#ppdefine <GT>_EX_3(size, ...) (<GT>_PARENS_ ## size (__VA_ARGS__))
#ppdefine <GT>_EX_2(size, ...) <GT>_EX_3(size, __VA_ARGS__)
#ppdefine <GT>_EX_1(...) <GT>_EX_2(<GS>_ARG_N(__VA_ARGS__), __VA_ARGS__)
#ppdefine <GT>(...) <GT>_EX_1(__VA_ARGS__)

#pppoprange

#pppushrange 1 8
#pppushrange 1 4

#ppdefine <$b[<$rv0> % <$rv1> eq 0]<$$bt[NUM_<$rv0>_DIVISIBLE_BY_<$rv1>]><$$bf[<$ppskip>]>>

#pppoprange 2

// #pppushrange 1 4
// #pppushrange
//
// #ppdefine <GN>_<$rv0>(...


#endif /* PP_GEN_HH */
